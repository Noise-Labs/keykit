2c2
< # ergox_nthloop
---
> # klooper (post-nthloop)
12c12,13
< DebugOsc = 0
---
> DebugOsc = 1
> DebugJson = 1
13a15
> DebugMidi = 0
23c25
< #define xxx rereadlib();nthloop()
---
> #define xxx rereadlib();klooper()
25,32c27
< function ergox_nthloop_actionmf {
< 	return(readmf("c:\\local\\midi\\tjt\\actionseries\\actionseries.mid"))
< }
< 
< function nth() {
< 	nthloop()
< }
< function nthloop() {
---
> function klooper() {
34,36c29,30
< 	if ( ! defined(Osclisten) ) {
< 		Osclisten = 1384
< 	}
---
> 	Osclisten = 7777
> 	Jsonlisten = 7778
38,42c32,36
< 	if ( ! defined(Launchpad_output) ) {
< 		print("You should define the Launchpad input device...")
< 		global Launchpad_output
< 		Launchpad_output = -1
< 	}
---
> #	if ( ! defined(Launchpad_output) ) {
> #		print("You should define the Launchpad input device...")
> #		global Launchpad_output
> #		Launchpad_output = -1
> #	}
50c44
< 		print("ergox_nthloop() only works on Windows, sorry!")
---
> 		print("ergox_klooper() only works on Windows, sorry!")
65c59
< 	t = new ergox_nthloop_mastertypo(patchprefix)
---
> 	t = new ergox_klooper_mastertypo(patchprefix)
71c65
< class ergox_nthloop_mastertypo {
---
> class ergox_klooper_mastertypo {
75c69
< 	print("ergox_nthloop init started...") 
---
> 	# print("ergox_klooper init started...") 
76a71,77
> 	$.note_area_limit = 0.006
> 	$.slider_area_limit = 0.13
> 	$.button_area_limit = 0.15
> 	$.numprograms = 3
> 	# $.slider1 = "pitchbend"
> 	$.slider1 = "quant"
> 	$.last_note_channel = 1
79a81,86
> 	$.tuio_sid_note = []
> 	$.tuio_sid_active = []
> 	$.tuio_sid_pitchbend = []
> 	$.tuio_sid_x = []
> 	$.tuio_sid_y = []
> 	$.tuio_sid_z = []
90d96
< 	$.initdone = 0
92a99,100
> 	$.last_corner_trans = 0
> 	$.last_corner_fade = 0
140c148,149
< 		"trigger%" = "int"
---
> 		"trigger%" = "int",
> 		"kinedist" = "int"
161c170,171
< 		"loopnotes" = "int"
---
> 		"loopnotes" = "int",
> 		"program" = "int"
172a183
> 	$.set_globalparam("scadjust",1)
296a308,309
> 	$.scale_sequence = [0="Chinese",1="African",2="Arabian",3="New Age",4="Fifths",5="Chromatic"]
> 
308c321
< 	$.ergox_nthloop = []
---
> 	$.ergox_klooper = []
310c323
< 		$.ergox_nthloop[lp] = new ergox_nthloop_onelooper($,lp,$.stepsize,lp+1,$.nphrases,vals,$.loopquant)
---
> 		$.ergox_klooper[lp] = new ergox_klooper_onelooper($,lp,$.stepsize,lp+1,$.nphrases,vals,$.loopquant)
313c326
< 	print("Init done, now starting OSC ...") 
---
> 	# print("Init done, now starting OSC ...") 
328c341,349
< 		# print("osctid = ",$.osctid)
---
> 	}
> 
> 	$.jsonf = open(string(Jsonlisten)+"@127.0.0.1","rf","tcpip_listen")
> 	print("Listening for JSON on ",Jsonlisten)
> 	if ( $.jsonf == "" ) {
> 		print("Unable to listen on ",Jsonlisten," !?")
> 		$.jsontid = -1
> 	} else {
> 		$.jsontid = task $.jsontask()
336d356
< 	$.registervisualizer("127.0.0.1",1385,0)
338,339c358,360
< 	vismachine = "nosuchbook";
< 	vismachine = "antiprism";
---
> 	# $.registervisualizer("127.0.0.1",1385,0)
> 	# vismachine = "nosuchbook";
> 	# vismachine = "antiprism";
344c365
< 	print("OPENING BIDULE, hostname=",bidulehost," port=",biduleport)
---
> 	print("Sending OSC to BIDULE, hostname=",bidulehost," port=",biduleport)
351,352d371
< 	$.initdone = 1
< 
362c381,383
< 	launchpad_reset()
---
> 	# launchpad_reset()
> 
> 	# $.getallparams()
364,377d384
< 	print("Asking parameter controller for parameters")
< 	$.to_parameter_controllers([0="/nth/sendallparams"])
< 	print("Waiting for all parameter controller messages to arrive.")
< 	$.got_continue = 0
< 	$.to_parameter_controllers([0="/nth/echo",1="continue"])
< 	toolong = Now + milliclicks(10000)
< 	while ( $.got_continue == 0 && Now < toolong ) {
< 		sleeptill(Now+1b/2)
< 	}
< 	if ( Now >= toolong ) {
< 		print("Didn't get continue message!?  Continuing anyway...")
< 	} else {
< 		print("All parameters sent (and hopefully received).")
< 	}
380a388,391
> method getallparams()
> {
> }
> 
467c478
< 	t = $.ergox_nthloop[$.currloop]
---
> 	t = $.ergox_klooper[$.currloop]
550c561
< 	$.handle_midi_keyboard(p)
---
> 	$.handle_midi_keyboard(p,$.currloop)
570,571c581,582
< 	global ergox_nthloop_osc_restart
< 	onexit(ergox_nthloop_osc_restart,$)
---
> 	global ergox_klooper_osc_restart
> 	onexit(ergox_klooper_osc_restart,$)
572a584,593
> 		if ( typeof(d) == "array" ) {
> 			k = d["elements"]
> 			for ( n=0; n<k; n++ ) {
> 				$.handle_osc(d[n])
> 			}
> 		} else {
> 			$.handle_osc(d)
> 		}
> 	}
> }
574,576c595,619
< 		if ( $.initdone == 0 ) {
< 			# print("Ignoring osc messages till initdone... val=",$.initdone)
< 			continue
---
> method handle_tuio_alive(d) {
> 	# print("alive=",d)
> 	nd = sizeof(d)
> 	tmparr = arraycopy($.tuio_sid_active)
> 	for ( n=2; n<nd; n++ ) {
> 		sid = d[n]
> 		delete tmparr[sid]
> 	}
> 	for ( sid in tmparr ) {
> 		t = $.sid_to_type(sid)
> 		if ( t == "note" ) {
> 			nt = $.tuio_sid_note[sid]
> 			loopnum = nt.chan - 1
> 			nt.type = NOTEOFF
> 			# print("Now=",Now," NOTE OFF SID ",sid," nt=",nt)
> 			$.handle_midi_keyboard(nt,loopnum)
> 		} else if ( t == "slider" ) {
> 			slider = $.sid_to_slider(sid)
> 			# print("SLIDER ",slider," WENT AWAY!!")
> 			$.handle_tuio_slider(sid,slider,0,0,0)
> 		} else if ( t == "button" ) {
> 			button = $.sid_to_button(sid)
> 			# print("BUTTON ",button," WENT AWAY!!")
> 		} else {
> 			print("Unknown sid type? sid=",sid," t=",t)
577a621,626
> 		# print("DELETING SID=",sid," note=",$.tuio_sid_note[sid])
> 		delete $.tuio_sid_active[sid]
> 		delete $.tuio_sid_note[sid]
> 		delete $.tuio_sid_z[sid]
> 	}
> }
579,580c628,691
< 		if ( DebugOsc ) 
< 			print("osctask got d=",d)
---
> method do_pitchbend(sid,ch,x,f) {
> 	# PITCHBEND
> 	nt = ''
> 	if ( f == 0 ) {
> 		# print("ZEROING PITCHBEND for ch=",ch)
> 		nt = pitchbend(ch,0)
> 		delete $.tuio_sid_pitchbend[sid]
> 	}
> 	else if ( sid in $.tuio_sid_pitchbend ) {
> 		pb = $.tuio_sid_pitchbend[sid]
> 		# print("ADJUST B PITCHBEND, pb=",pb)
> 		oldx = pb["x"]
> 		oldval = pb["value"]
> 		dx = x - oldx
> 		smooth = 3
> 		newval = ((smooth-1)*oldval + (oldval+dx*8192)) / smooth
> 		newx = ((smooth-1)*oldx + x) / smooth
> 		# print("ADJUST B PITCHBEND ch=",ch," x=",x," oldx=",pb["x"]," dx=",dx," newx=",newx," newval=",newval)
> 		$.tuio_sid_pitchbend[sid] = ["value"=newval,"x"=newx]
> 		nt = pitchbend(ch,newval)
> 		# print("ADJUST C PITCHBEND, pb=",$.tuio_sid_pitchbend[sid])
> 	} else {
> 		# print("\nNEW PITCHBEND ch=",ch," x=",x)
> 		$.tuio_sid_pitchbend[sid] = ["value"=0,"x"=x]
> 		nt = pitchbend(ch,0)
> 	}
> 	return(nt)
> }
> 
> method controller_for_slider(sid,slider,ch,x,y,f) {
> 	nt = ''
> 	if ( slider == 0 ) {
> 		# MODULATION
> 		x = (x - 0.2) * 1.4
> 		if ( x < 0 ) {
> 			x = 0
> 		}
> 		v = integer(x*128) % 128
> 		nt = controller(ch,0x01,v)
> 	} else if ( slider == 1 ) {
> 		if ( $.slider1 == "pitchbend" ) {
> 			nt = $.do_pitchbend(sid,ch,x,f)
> 		} else {
> 			if ( x < 0.25 )
> 				q = 1b/2
> 			else if ( x < 0.6 )
> 				q = 1b/4
> 			else if ( x < 0.85 )
> 				q = 1b/8
> 			else
> 				q = 0
> 			# print("X = ",x,"  Q = ",q," f=",f)
> 			t = $.ergox_klooper[ch-1]
> 			oldq = t.get_chanparam("quantreal")
> 			if ( q != oldq ) {
> 				# print("CHANGED QUANT SLIDER x=",x," ch=",ch," Q=",q)
> 				t.set_chanparam("quantreal",q)
> 			}
> 		}
> 	} else {
> 		print("Unknown slider value in controller_for_slider: ",slider)
> 	}
> 	return(nt)
> }
582,584c693,711
< 		addr = d[0]
< 		t = $.ergox_nthloop[$.currloop]
< 		ch = t.get_currchan()
---
> method handle_tuio_slider(sid,slider,x,y,f) {
> 	if ( $.last_note_channel <= 0 ) {
> 		print("No $.last_note_channel, ignoring slider")
> 		return()
> 	}
> 	ch = $.last_note_channel
> 	nt = $.controller_for_slider(sid,slider,ch,x,y,f)
> 	if ( nt != '' ) {
> 		# print("PLAYING slider nt=",nt)
> 		$.realtime(nt,Now)
> 		# if ( ! sid in $.tuio_sid_active ) {
> 		# 	print("SLIDER!  ch=",ch," xyf = ",x,y,f)
> 		# }
> 		$.tuio_sid_active[sid] = 1
> 		$.tuio_sid_note[sid] = nt
> 		$.tuio_sid_x[sid] = x
> 		$.tuio_sid_y[sid] = y
> 	}
> }
586,593c713,732
< 		if ( addr == "/nth/playgrid" ) {
< 			r = d[1]
< 			c = d[2]
< 			down = d[3]
< 			$.playgrid(t,r,c,down)
< 		} else if ( addr == "/nth/echo" ) {
< 			if ( d[1] == "continue" ) {
< 				$.got_continue = 1
---
> method handle_tuio_button(sid,button,x,y,f) {
> 	if ( sid in $.tuio_sid_active ) {
> 		# Already down
> 	} else {
> 		print("BUTTON went down!  sid=",sid," button=",button," f = ",f)
> 		$.tuio_sid_active[sid] = 1
> 		if ( button == 0 ) {
> 			ch = $.last_note_channel
> 			t = $.ergox_klooper[ch-1]
> 			prog = (t.get_chanparam("program")+1)%($.numprograms)
> 			t.set_chanparam("program",prog)
> 			$.ano()
> 			print("BUTTON: PATCH!! ch=",ch," prog=",prog)
> 			$.realtime(progchange(prog+1,ch),Now)
> 		} else if ( button == 1 ) {
> 			sc = $.get_globalparam("scale")
> 			nsc = sizeof($.scale_sequence)
> 			for ( n=0; n<nsc; n++ ) {
> 				if ( $.scale_sequence[n] == sc )
> 					break
595,638c734,735
< 		} else if ( addr == "/nth/ano" ) {
< 			print("ANO!")
< 			$.realano()
< 		} else if ( addr == "/nth/grab" ) {
< 			r = d[1]
< 			c = d[2]
< 			p = lastbunch(Recorded)
< 			p.time = 0
< 			$.cell[r][c] = p
< 			print("grabbed row/col=",r,c,"  p=",p)
< 		} else if ( addr == "/nth/currentchannel" ) {
< 			lp = d[1] - 1
< 			$.currloop = lp
< 			t = $.ergox_nthloop[$.currloop]
< 			print("SETTING CHANNEL =",t.get_currchan())
< 		} else if ( addr == "/nth/currentloop" ) {
< 			print("/nth/currentloop IS BEING IGNORED!")
< 			continue
< 		} else if ( addr == "/nth/perchan/set" ) {
< 			nm = d[1]
< 			looptoset = d[2]-1
< 			v = d[3]
< 			t = $.ergox_nthloop[looptoset]
< 			if ( nm in $.perchanparamlist ) {
< 				pt = $.perchanparamlist[nm]
< 				if ( pt == "toggle" ) {
< 					t.set_chanparam(nm,$.ison(nm,v))
< 				} else if ( pt == "int" ) {
< 					# The value of v might be
< 					# a 'beat' value like 3b/4
< 					en = eval_number(v)
< 					if ( ! defined(en) )
< 						en = -1
< 					t.set_chanparam(nm,integer(en))
< 				} else if ( pt == "float" ) {
< 					t.set_chanparam(nm,float(v))
< 				} else if ( pt == "string" ) {
< 					t.set_chanparam(nm,v)
< 				} else {
< 					print("Unknown parameter type for nm=",nm)
< 				}
< 				if ( nm in $.chanparamset ) {
< 					t.($.chanparamset[nm])(ch)
< 				}
---
> 			if ( n >= nsc ) {
> 				n = 0
640c737
< 				print("UNKNOWN loop parameter: ",nm)
---
> 				n = (n + 1) % nsc
642,673c739,798
< 		} else if ( addr ~~ "/nth/global/set" ) {
< 			nm = d[1]
< 			v = d[2]
< 			if ( nm in $.globalparamlist ) {
< 				pt = $.globalparamlist[nm]
< 				if ( pt == "toggle" ) {
< 					$.set_globalparam(nm,$.ison(nm,v))
< 					if ( nm == "transposed2" ||
< 						nm == "transposeu5" ||
< 						nm == "transposeu7") {
< 						$.set_transpose_hack()
< 					}
< 				} else if ( pt == "int" ) {
< 					# The value of v might be
< 					# a 'beat' value like 3b/4
< 					en = eval_number(v)
< 					if ( ! defined(en) )
< 						en = -1
< 					$.set_globalparam(nm,integer(en))
< 				} else if ( pt == "float" ) {
< 					$.set_globalparam(nm,float(v))
< 				} else if ( pt == "string" ) {
< 					$.set_globalparam(nm,v)
< 				} else {
< 					print("Unknown parameter type for nm=",nm)
< 				}
< 				if ( nm in $.globalparamset ) {
< 					$.($.globalparamset[nm])(v)
< 				}
< 			} else if ( nm == "transposeabs" ) {
< 				i = integer(v)
< 				$.set_transpose(i)
---
> 			sc = $.scale_sequence[n]
> 			print("BUTTON: NEW SCALE n=",n," scale=",sc)
> 			$.set_globalparam("scale",sc)
> 			$.set_scale()
> 			$.ano()
> 				
> 		} else if ( button == 2 ) {
> 			print("BUTTON: TRANSPOSE!!")
> 			$.do_transrand()
> 			$.ano()
> 		}
> 	}
> }
> 
> method sid_to_type(sid) {
> 	ch = sid/1000
> 	if ( ch < 4 ) {
> 		return("note")
> 	} else if ( ch < 6 ) {
> 		return("slider")
> 	} else {
> 		return("button")
> 	}
> }
> 
> method sid_to_slider(sid) {
> 	ch = sid/1000
> 	if ( ch == 4 || ch == 5 )
> 		return(ch-4)
> 	else
> 		return(-1)
> }
> 
> method sid_to_button(sid) {
> 	ch = sid/1000
> 	if ( ch > 5 )
> 		return(ch-6)
> 	else
> 		return(-1)
> }
> 
> method z_message(ch,v) {
> 	# channel pressure
> 	return(midibytes((ch-1) + 0xd0, v))
> }
> 
> method x_to_pitch(x) {
> 	pitch = 30 + 70 * x
> 	return(pitch)
> }
> 
> method handle_tuio_25D_set(sid,x,y,z,w,h,f) {
> 	ch = sid/1000
> 
> 	# First three areas are channels 1-3, the rest are sliders and buttons
> 	if ( ch >= 4 ) {
> 		slider = $.sid_to_slider(sid)
> 		if ( slider >= 0 ) {
> 			if ( f >= $.slider_area_limit ) {
> 				$.handle_tuio_slider(sid,slider,x,y,f)
675,676c800
< 				print("UNKNOWN global parameter: ",nm)
< 				# $.set_globalparam(nm,v)
---
> 				# print("IGNORING slider, f=",f)
678,692c802,1015
< 		} else if ( addr == "/nth/global/action") {
< 			action = d[1]
< 			# print("NTH GLOBAL ACTION = ",action)
< 			if ( action == "clear" ) {
< 				$.all_loops("oneloop_clear")
< 			} else if ( action == "transreset" ) {
< 				$.set_transpose(0)
< 			} else if ( action == "transrand" ) {
< 				if ( (Now-$.last_transrand) < milliclicks(500) ) {
< 					$.set_transpose(0)
< 					print("Multiple Quick TransRand == TransReset!\n");
< 				} else {
< 					trans = [0=3,1=5,2=7]
< 					tp = (rand(2)*2-1) * trans[rand(sizeof(trans))]
< 					$.set_transpose($.get_transpose()+tp)
---
> 			return()
> 		}
> 		# print("BUTTON sid=",sid," xy=",x,y," wh=",w,h," f=",f)
> 		button = $.sid_to_button(sid)
> 		if ( button >= 0 ) {
> 			if ( f >= $.button_area_limit ) {
> 				$.handle_tuio_button(sid,button,x,y,f)
> 			} else {
> 				# print("IGNORING button, f=",f)
> 			}
> 			return()
> 		}
> 		print("HMMM sid=",sid," is neither button nor slider!?")
> 	}
> 
> 	if ( f < $.note_area_limit ) {
> 		# print("Ignoring note, f=",f)
> 		return()
> 	}
> 	# print("SET last_note_channel =",ch," xyf=",x,y,f)
> 	$.last_note_channel = ch
> 	loopnum = ch - 1
> 	pitch = $.x_to_pitch(x)
> 	vol = 20 + 118 * y
> 	if ( vol > 127 )
> 		vol = 127
> 	if ( sid in $.tuio_sid_note ) {
> 		dx = x - $.tuio_sid_x[sid]
> 		dy = y - $.tuio_sid_y[sid]
> 		dist = sqrt(dx*dx + dy*dy)
> 
> 		# print("SID=",sid,"  Z = ",z)
> 		# Range of z we're interested in is from 0.1 to 0.25
> 		minz = 0.05
> 		maxz = 0.20
> 		if ( z > minz ) {
> 			if ( z > maxz ) {
> 				z = maxz
> 			}
> 			if ( sid in $.tuio_sid_z ) {
> 				oldz = $.tuio_sid_z[sid]
> 				smooth = 3
> 				newz = ((smooth-1) * oldz + z) / smooth
> 				# print("SMOOTHED oldz=",oldz," Z=",z," newz=",newz)
> 				z = newz
> 			} else {
> 				# print("FIRST Z = ",z)
> 			}
> 			$.tuio_sid_z[sid] = z
> 			v = integer(((z - minz) *  128) / (maxz-minz))
> 			nt = $.z_message(ch,v)
> 			$.realtime(nt,Now)
> 		} else {
> 			# Shouldn't really send it ALL the time, but...
> 			v = 0
> 			nt = $.z_message(ch,0)
> 			$.realtime(nt,Now)
> 		}
> 
> 		if ( ! ( sid in $.tuio_sid_active ) ) {
> 			print("Hey, sid=",sid," is in tuio_sid_note, but not tuio_sid_active!?")
> 			return()
> 		}
> 
> 		# print("sid already down, dist=",dist," xy=",x,y," oldxy=",
> 		# 	$.tuio_sid_x[sid],$.tuio_sid_y[sid])
> 
> 		kinedist = $.get_globalparam("kinedist") / 1000.0
> 		if ( dist > kinedist ) {
> 			# print("dist>",kinedist)
> 			# let go of the old pitch, and play the new one
> 			nt = $.tuio_sid_note[sid]
> 			nt.type = NOTEOFF
> 			# print("Now=",Now," MOVE NOTE OFF SID ",sid," nt=",nt)
> 			$.handle_midi_keyboard(nt,loopnum)
> 			nt.type = NOTEON
> 			nt.pitch = pitch
> 			nt.vol = vol
> 			# print("Playing note on channel ",nt.chan)
> 			# print("Now=",Now," MOVE NOTE ON SID ",sid," nt=",nt,"  +++++")
> 			# print("   sid=",sid," noteoff/noteon for pitch=",pitch)
> 			$.handle_midi_keyboard(nt,loopnum)
> 
> 			$.tuio_sid_note[sid] = nt
> 			$.tuio_sid_x[sid] = x
> 			$.tuio_sid_y[sid] = y
> 		} else {
> 			# print("   dist<=kinedist? dist=",dist," kinedist=",kinedist)
> 		}
> 	} else {
> 		nt = makenote(pitch)
> 		nt.dur = 1b/16
> 		nt.chan = ch
> 		nt.vol = vol
> 		nt.type = NOTEON
> 		# print("NEW note on channel ",nt.chan)
> 		# print("Now=",Now," NEW NOTE ON ",sid," nt=",nt,"   +++++")
> 		$.handle_midi_keyboard(nt,loopnum)
> 		$.tuio_sid_active[sid] = 1
> 		$.tuio_sid_note[sid] = nt
> 		$.tuio_sid_x[sid] = x
> 		$.tuio_sid_y[sid] = y
> 		# $.tuio_sid_z[sid] = z
> 	}
> 	return()
> }
> 
> method handle_osc(d) {
> 
> 	# if ( DebugOsc ) 
> 	# 	print("handle_osc d=",d)
> 
> 	addr = d[0]
> 	t = $.ergox_klooper[$.currloop]
> 	ch = t.get_currchan()
> 
> 	if ( substr(addr,1,6) == "/tuio/" ) {
> 		cmd = d[1]
> 		if ( cmd == "alive" ) {
> 			$.handle_tuio_alive(d)
> 		} else if ( cmd == "fseq" ) {
> 			# do nothing?
> 		} else if ( cmd == "set" ) {
> 			if ( addr == "/tuio/25Dblb" ) {
> 				sid = d[2]
> 				x = d[3]
> 				y = d[4]
> 				z = d[5]
> 				angle = d[6]
> 				w = d[7]
> 				h = d[8]
> 				f = d[9]
> 				# print("25Dblb sid=",sid," z=",z," w=",w," h=",h," f=",f)
> 				$.handle_tuio_25D_set(sid,x,y,z,w,h,f)
> 			} else if ( addr == "/tuio/25Dcur" ) {
> 				sid = d[2]
> 				x = d[3]
> 				y = d[4]
> 				z = d[5]
> 				w = 0.0
> 				h = 0.0
> 				f = 0.0
> 				$.handle_tuio_25D_set(sid,x,y,z,w,h,f)
> 			} else if ( addr == "/tuio/2Dcur" ) {
> 				print("UNIMPLEMENTED: /tuio/2Dcur !!")
> 			}
> 		}
> 	} else if ( addr == "/nth/playgrid" ) {
> 		r = d[1]
> 		c = d[2]
> 		down = d[3]
> 		$.playgrid(t,r,c,down)
> 	} else if ( addr == "/nth/echo" ) {
> 		if ( d[1] == "continue" ) {
> 			$.got_continue = 1
> 		}
> 	} else if ( addr == "/nth/ano" ) {
> 		print("ANO!")
> 		$.realano()
> 	} else if ( addr == "/nth/grab" ) {
> 		r = d[1]
> 		c = d[2]
> 		p = lastbunch(Recorded)
> 		p.time = 0
> 		$.cell[r][c] = p
> 		print("grabbed row/col=",r,c,"  p=",p)
> 	} else if ( addr == "/nth/currentchannel" ) {
> 		lp = d[1] - 1
> 		$.currloop = lp
> 		t = $.ergox_klooper[$.currloop]
> 		print("SETTING CHANNEL =",t.get_currchan())
> 	} else if ( addr == "/nth/currentloop" ) {
> 		print("/nth/currentloop IS BEING IGNORED!")
> 		return()
> 	} else if ( addr == "/nth/perchan/set" ) {
> 		nm = d[1]
> 		looptoset = d[2]-1
> 		v = d[3]
> 		t = $.ergox_klooper[looptoset]
> 		if ( nm in $.perchanparamlist ) {
> 			pt = $.perchanparamlist[nm]
> 			if ( pt == "toggle" ) {
> 				t.set_chanparam(nm,$.ison(nm,v))
> 			} else if ( pt == "int" ) {
> 				# The value of v might be
> 				# a 'beat' value like 3b/4
> 				en = eval_number(v)
> 				if ( ! defined(en) )
> 					en = -1
> 				t.set_chanparam(nm,integer(en))
> 			} else if ( pt == "float" ) {
> 				t.set_chanparam(nm,float(v))
> 			} else if ( pt == "string" ) {
> 				t.set_chanparam(nm,v)
> 			} else {
> 				print("Unknown parameter type for nm=",nm)
> 			}
> 			if ( nm in $.chanparamset ) {
> 				t.($.chanparamset[nm])(ch)
> 			}
> 		} else {
> 			print("UNKNOWN loop parameter: ",nm)
> 		}
> 	} else if ( addr ~~ "/nth/global/set" ) {
> 		nm = d[1]
> 		v = d[2]
> 		if ( nm in $.globalparamlist ) {
> 			pt = $.globalparamlist[nm]
> 			if ( pt == "toggle" ) {
> 				$.set_globalparam(nm,$.ison(nm,v))
> 				if ( nm == "transposed2" ||
> 					nm == "transposeu5" ||
> 					nm == "transposeu7") {
> 					$.set_transpose_hack()
694,702c1017,1027
< 				$.last_transrand = Now
< 			} else if ( action == "fade" ) {
< 				$.all_loops("do_fade")
< 			} else if ( action == "comb" ) {
< 				$.all_loops("do_comb")
< 			} else if ( action == "shuffle" ) {
< 				$.all_loops("do_shuffle")
< 			} else if ( action == "quantnow" ) {
< 				$.all_loops("do_quantnow")
---
> 			} else if ( pt == "int" ) {
> 				# The value of v might be
> 				# a 'beat' value like 3b/4
> 				en = eval_number(v)
> 				if ( ! defined(en) )
> 					en = -1
> 				$.set_globalparam(nm,integer(en))
> 			} else if ( pt == "float" ) {
> 				$.set_globalparam(nm,float(v))
> 			} else if ( pt == "string" ) {
> 				$.set_globalparam(nm,v)
704c1029
< 				print("UNKNOWN global action: ",action)
---
> 				print("Unknown parameter type for nm=",nm)
706,725c1031,1256
< 		} else if ( addr == "/nth/perchan/action") {
< 			action = d[1]
< 			lp = d[2]-1
< 			t = $.ergox_nthloop[lp]
< 			if ( DebugParam )
< 				print("NTH LOOP ACTION = ",d[1])
< 			if ( action == "clear" ) {
< 				t.oneloop_clear()
< 			} else if ( action == "quantnow" ) {
< 				t.do_quantnow()
< 			} else if ( action == "fade" ) {
< 				t.do_fade(1)
< 			} else if ( action == "comb" ) {
< 				t.do_comb()
< 			} else if ( action == "shuffle" ) {
< 				t.do_shuffle()
< 			} else if ( action == "comb" ) {
< 				$.all_loops("onechan_comb",ch)
< 			} else if ( action == "shuffle" ) {
< 				$.all_loops("onechan_shuffle",ch)
---
> 			if ( nm in $.globalparamset ) {
> 				$.($.globalparamset[nm])(v)
> 			}
> 		} else if ( nm == "transposeabs" ) {
> 			i = integer(v)
> 			$.set_transpose(i)
> 		} else {
> 			print("UNKNOWN global parameter: ",nm)
> 			# $.set_globalparam(nm,v)
> 		}
> 	} else if ( addr == "/nth/global/action") {
> 		action = d[1]
> 		# print("NTH GLOBAL ACTION = ",action)
> 		if ( action == "clear" ) {
> 			$.all_loops("oneloop_clear")
> 		} else if ( action == "transreset" ) {
> 			$.set_transpose(0)
> 		} else if ( action == "transrand" ) {
> 			$.do_transrand()
> 		} else if ( action == "fade" ) {
> 			$.all_loops("do_fade")
> 		} else if ( action == "comb" ) {
> 			$.all_loops("do_comb")
> 		} else if ( action == "shuffle" ) {
> 			$.all_loops("do_shuffle")
> 		} else if ( action == "quantnow" ) {
> 			$.all_loops("do_quantnow")
> 		} else {
> 			print("UNKNOWN global action: ",action)
> 		}
> 	} else if ( addr == "/nth/perchan/action") {
> 		action = d[1]
> 		lp = d[2]-1
> 		t = $.ergox_klooper[lp]
> 		if ( DebugParam )
> 			print("NTH LOOP ACTION = ",d[1])
> 		if ( action == "clear" ) {
> 			t.oneloop_clear()
> 		} else if ( action == "quantnow" ) {
> 			t.do_quantnow()
> 		} else if ( action == "fade" ) {
> 			t.do_fade(1)
> 		} else if ( action == "comb" ) {
> 			t.do_comb()
> 		} else if ( action == "shuffle" ) {
> 			t.do_shuffle()
> 		} else if ( action == "comb" ) {
> 			$.all_loops("onechan_comb",ch)
> 		} else if ( action == "shuffle" ) {
> 			$.all_loops("onechan_shuffle",ch)
> 		} else {
> 			print("UNKNOWN perchan action: ",action)
> 		}
> 	} else if ( addr == "/registerclient" ) {
> 		$.registerclient(d[1],d[2])
> 	} else if ( addr == "/unregisterclient" ) {
> 		$.registerclient(d[1],d[2])
> 	} else {
> 		print("osctask doesn't recognize: ",d)
> 	}
> }
> 
> method do_transrand() {
> 	if ( (Now-$.last_transrand) < milliclicks(1000) ) {
> 		$.set_transpose(0)
> 		print("Multiple Quick TransRand == TransReset!\n");
> 	} else {
> 		trans = [0=3,1=5,2=7]
> 		tp = (rand(2)*2-1) * trans[rand(sizeof(trans))]
> 		$.set_transpose($.get_transpose()+tp)
> 		# print("SINGLE TransRand!")
> 	}
> 	$.last_transrand = Now
> }
> 
> method jsontask() {
> 	global ergox_klooper_json_restart
> 	onexit(ergox_klooper_json_restart,$)
> 
> 	# Input will start coming as soon as a connection is open,
> 	# and setting the fifotype on the socket inside handle_json is
> 	# too late, so we change the default.
> 	fifoctl("default","type","l")
> 
> 	while ( (x=get($.jsonf)) != Eof ) {
> 		task $.handle_json(x)
> 	}
> 	print("JSONTASK ends!?")
> }
> 
> method handle_json(jsonconn) {
> 
> 	if ( DebugJson > 1 )
> 		print("New JSON connection!")
> 
> 	while ( (d=get(jsonconn["r"])) != Eof ) {
> 		if ( substr(d,1,1) == "{" ) {
> 			if ( DebugJson > 1 )
> 				print("GOT JSON!! d=",d)
> 			j = $.string2json(d)
> 			ret = $.jsonhandler(j)
> 			if ( DebugJson > 1 )
> 				print("SENDING BACK ret=",ret)
> 			put(jsonconn["w"],ret)
> 			break
> 		}
> 	}
> 	close(jsonconn["r"])
> 	close(jsonconn["w"])
> }
> 
> # This is a silly way of doing substitute, should it be built-in?
> method substitute(s,c1,c2) {
> 	w = split(s,c1)
> 	nw = sizeof(w)
> 	r = ""
> 	for ( n=0; n<nw; n++ ) {
> 		if ( n > 0 )
> 			r += c2 
> 		r += w[n]
> 	}
> 	return(r)
> }
> 
> # JSON handling should probably be built-in
> method string2json(d)
> {
> 	d = " "+d+" "   # to ensure that the split stuff works
> 	d = $.substitute(d,":","=")
> 	d = $.substitute(d,"{","[")
> 	d = $.substitute(d,"}","]")
> 	if ( DebugJson > 1 )
> 		print("STRING2JSON = ",d)
> 	eval "JSON="+d
> 	return(JSON)
> }
> 
> method jsonok() {
> 	return( "{\"jsonrpc\": \"2.0\", \"result\": 0 }\r\n" )
> }
> 
> method jsonerr(e,id) {
> 	if ( typeof(e) != "string" ) {
> 		print("Hey, e isn't a string in jsonerr? e=",e)
> 	}
> 	return( "{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32700, \"message\": \"" + string(e) + "\"}, \"id\": "+string(id)+" }\r\n" )
> }
> 
> method jsonresult_str(r,id) {
> 	return( "{\"jsonrpc\": \"2.0\", \"result\": \"" + string(r) + "\", \"id\": \""+string(id)+"\" }\r\n" )
> }
> 
> method jsonhandler(j) {
> 
> 	if ( ! ("method" in j) ) {
> 		return($.jsonerr("No method in json?",-1))
> 	}
> 
> 	id = j["id"]
> 	meth = j["method"]
> 	params = j["params"]
> 
> 	if ( meth == "echo" ) {
> 		return( $.jsonresult_str(params["value"],id) )
> 	}
> 	if ( meth == "ping" ) {
> 		return( $.jsonresult_str("True",id) )
> 	}
> 	if ( meth == "perchan_set" ) {
> 		# print("PERCHAN_SET params=",params)
> 		nm = params["name"]
> 		looptoset = params["channel"]
> 		v = params["value"]
> 		# print("perchan_set, name=",nm," ch/looptoset=",params["channel"]," v=",v)
> 
> 		t = $.ergox_klooper[looptoset]
> 		ch = t.get_currchan()
> 		if ( ! (nm in $.perchanparamlist) ) {
> 			return($.jsonerr("UNKNOWN loop parameter: "+nm,id))
> 		}
> 		pt = $.perchanparamlist[nm]
> 		if ( pt == "toggle" ) {
> 			t.set_chanparam(nm,$.ison(nm,v))
> 		} else if ( pt == "int" ) {
> 			# The value of v might be
> 			# a 'beat' value like 3b/4
> 			en = eval_number(v)
> 			if ( ! defined(en) )
> 				en = -1
> 			t.set_chanparam(nm,integer(en))
> 		} else if ( pt == "float" ) {
> 			t.set_chanparam(nm,float(v))
> 		} else if ( pt == "string" ) {
> 			t.set_chanparam(nm,v)
> 		} else {
> 			print("Unknown parameter type for nm=",nm)
> 		}
> 		if ( nm in $.chanparamset ) {
> 			t.($.chanparamset[nm])(ch)
> 		}
> 		return( $.jsonok("True",id) )
> 	}
> 	if ( meth == "global_set" ) {
> 		nm = params["name"]
> 		v = params["value"]
> 		# print("global_set, name=",nm," v=",v)
> 		if ( nm in $.globalparamlist ) {
> 			pt = $.globalparamlist[nm]
> 			if ( pt == "toggle" ) {
> 				$.set_globalparam(nm,$.ison(nm,v))
> 				if ( nm == "transposed2" ||
> 					nm == "transposeu5" ||
> 					nm == "transposeu7") {
> 					$.set_transpose_hack()
> 				}
> 			} else if ( pt == "int" ) {
> 				# The value of v might be
> 				# a 'beat' value like 3b/4
> 				en = eval_number(v)
> 				if ( ! defined(en) )
> 					en = -1
> 				$.set_globalparam(nm,integer(en))
> 			} else if ( pt == "float" ) {
> 				$.set_globalparam(nm,float(v))
> 			} else if ( pt == "string" ) {
> 				$.set_globalparam(nm,v)
727c1258,1261
< 				print("UNKNOWN perchan action: ",action)
---
> 				print("Unknown parameter type for nm=",nm)
> 			}
> 			if ( nm in $.globalparamset ) {
> 				$.($.globalparamset[nm])(v)
729,732c1263,1288
< 		} else if ( addr == "/registerclient" ) {
< 			$.registerclient(d[1],d[2])
< 		} else if ( addr == "/unregisterclient" ) {
< 			$.registerclient(d[1],d[2])
---
> 		} else if ( nm == "transposeabs" ) {
> 			i = integer(v)
> 			$.set_transpose(i)
> 		} else {
> 			print("UNKNOWN global parameter: "+nm)
> 			return($.jsonerr("UNKNOWN global parameter: "+nm,id))
> 		}
> 		return( $.jsonok("True",id) )
> 	}
> 	if ( meth == "global_action" ) {
> 		action = params["action"]
> 		print("GLOBAL ACTION = ",action)
> 		if ( action == "clear" ) {
> 			$.all_loops("oneloop_clear")
> 		} else if ( action == "transreset" ) {
> 			$.set_transpose(0)
> 		} else if ( action == "transrand" ) {
> 			$.do_transrand()
> 		} else if ( action == "fade" ) {
> 			$.all_loops("do_fade")
> 		} else if ( action == "comb" ) {
> 			$.all_loops("do_comb")
> 		} else if ( action == "shuffle" ) {
> 			$.all_loops("do_shuffle")
> 		} else if ( action == "quantnow" ) {
> 			$.all_loops("do_quantnow")
734c1290,1291
< 			print("osctask doesn't recognize: ",d)
---
> 			print("UNKNOWN global action: ",action)
> 			return($.jsonerr("UNKNOWN global action: "+action,id))
735a1293
> 		return( $.jsonok("True",id) )
736a1295,1364
> 	if ( meth == "perchan_action") {
> 		action = params["action"]
> 		lp = params["channel"]
> 		print("PERCHAN ACTION = ",action," chan=",params["channel"]," lp=",lp)
> 		t = $.ergox_klooper[lp]
> 		if ( DebugParam )
> 			print("NTH LOOP ACTION = ",d[1])
> 		if ( action == "clear" ) {
> 			t.oneloop_clear()
> 		} else if ( action == "quantnow" ) {
> 			t.do_quantnow()
> 		} else if ( action == "fade" ) {
> 			t.do_fade(1)
> 		} else if ( action == "comb" ) {
> 			t.do_comb()
> 		} else if ( action == "shuffle" ) {
> 			t.do_shuffle()
> 		} else if ( action == "comb" ) {
> 			$.all_loops("onechan_comb",ch)
> 		} else if ( action == "shuffle" ) {
> 			$.all_loops("onechan_shuffle",ch)
> 		} else {
> 			print("UNKNOWN perchan action: ",action)
> 			return($.jsonerr("UNKNOWN perchan action: "+action,id))
> 		}
> 		return( $.jsonok("True",id) )
> 	}
> 	if ( meth == "current_channel" ) {
> 		lp = params["channel"]
> 		$.currloop = lp
> 		t = $.ergox_klooper[$.currloop]
> 		print("SETTING CHANNEL =",t.get_currchan(),"  currloop=",lp)
> 		return( $.jsonok("True",id) )
> 	}
> 
> 	return($.jsonerr("Klooper has no method named "+meth,-1))
> 		
> 	addr = d[0]
> 	t = $.ergox_klooper[$.currloop]
> 	ch = t.get_currchan()
> 
> 	if ( addr == "/nth/playgrid" ) {
> 		r = d[1]
> 		c = d[2]
> 		down = d[3]
> 		$.playgrid(t,r,c,down)
> 	} else if ( addr == "/nth/echo" ) {
> 		if ( d[1] == "continue" ) {
> 			$.got_continue = 1
> 		}
> 	} else if ( addr == "/nth/ano" ) {
> 		print("ANO!")
> 		$.realano()
> 	} else if ( addr == "/nth/grab" ) {
> 		r = d[1]
> 		c = d[2]
> 		p = lastbunch(Recorded)
> 		p.time = 0
> 		$.cell[r][c] = p
> 		print("grabbed row/col=",r,c,"  p=",p)
> 	} else if ( addr == "/nth/currentloop" ) {
> 		print("/nth/currentloop IS BEING IGNORED!")
> 	} else if ( addr == "/registerclient" ) {
> 		$.registerclient(d[1],d[2])
> 	} else if ( addr == "/unregisterclient" ) {
> 		$.registerclient(d[1],d[2])
> 	} else {
> 		return("jsontask doesn't recognize: "+string(d))
> 	}
> 	return("")
738a1367
> 
747,748c1376,1377
< 	for ( lp in $.ergox_nthloop ) {
< 		t = $.ergox_nthloop[lp]
---
> 	for ( lp in $.ergox_klooper ) {
> 		t = $.ergox_klooper[lp]
809,810c1438,1439
< 	for ( lp in $.ergox_nthloop ) {
< 		t = $.ergox_nthloop[lp]
---
> 	for ( lp in $.ergox_klooper ) {
> 		t = $.ergox_klooper[lp]
907a1537,1538
> 	# print("to_osc_clients is disabled (msg=",msg,")")
> 	return()
932,933c1563,1564
< 	for ( lp in $.ergox_nthloop ) {
< 		t = $.ergox_nthloop[lp]
---
> 	for ( lp in $.ergox_klooper ) {
> 		t = $.ergox_klooper[lp]
978a1610
> 	kill($.jsontid)
981a1614,1615
> 	if ( $.jsonf >= 0 )
> 		close($.jsonf)
986,987c1620,1621
< 	for ( lp in $.ergox_nthloop ) {
< 		t = $.ergox_nthloop[lp]
---
> 	for ( lp in $.ergox_klooper ) {
> 		t = $.ergox_klooper[lp]
995d1628
< 		Consecho = 1
997a1631
> 	Consecho = 1
1003,1004c1637,1638
< 	global ergox_nthloop_resetconsole
< 	onexit(ergox_nthloop_resetconsole,$)
---
> 	global ergox_klooper_resetconsole
> 	onexit(ergox_klooper_resetconsole,$)
1012,1013c1646,1647
< 	global ergox_nthloop_midi_restart
< 	onexit(ergox_nthloop_midi_restart,$)
---
> 	global ergox_klooper_midi_restart
> 	onexit(ergox_klooper_midi_restart,$)
1016c1650
< 		$.handle_midi_keyboard(c)
---
> 		$.handle_midi_keyboard(c,$.currloop)
1036a1671,1677
> method json_restart() {
> 	if ( ! $.stopme ) {
> 		print("RESTARTING jsontask!!")
> 		$.jsontid = task $.jsontask()
> 	}
> }
> 
1039,1042d1679
< 	if ( $.initdone == 0 ) {
< 		# print("Waiting for all pads to be touched...")
< 		return()
< 	}
1098c1735
< 				t = $.ergox_nthloop[$.currloop]
---
> 				t = $.ergox_klooper[$.currloop]
1211,1212c1848,1849
< method handle_midi_keyboard(c) {
< 	if ( DebugReal )
---
> method handle_midi_keyboard(c,loopnum) {
> 	if ( DebugMidi )
1215c1852
< 	t = $.ergox_nthloop[$.currloop]
---
> 	t = $.ergox_klooper[loopnum]
1226a1864,1866
> 	# print("handle_midi_keyboard isrecording=",isrecording)
> 	# print("   t.is_recording=",t.is_recording()," t.is_playloop=",t.is_playloop()," t.get_currchan=",t.get_currchan())
> 
1403c2043
< 		t = $.ergox_nthloop[$.currloop]
---
> 		t = $.ergox_klooper[$.currloop]
1509c2149
< 			t = $.ergox_nthloop[$.currloop]
---
> 			t = $.ergox_klooper[$.currloop]
1525c2165
< 			t = $.ergox_nthloop[$.currloop]
---
> 			t = $.ergox_klooper[$.currloop]
1638c2278
< class ergox_nthloop_onelooper {
---
> class ergox_klooper_onelooper {
1840c2480,2482
< 		# print("realtimetask ch=",$.currchan," loopleng=",loopleng)
---
> 		# if ( $.currchan == 1 ) {
> 		# 	print("realtimetask ch=",$.currchan," loopleng=",loopleng," loopphrase=",$.loopphrase)
> 		# }
1853c2495
< 			print("loopleng is 0, skipping by loopquant=",$.loopquant)
---
> 			# print("loopleng is 0, skipping by loopquant=",$.loopquant)
1895c2537
< 		print("PLAY_LOOP tm=",tm," loopnum=",$.loopnum," loopleng=",loopleng)
---
> 		print("PLAY_LOOP tm=",tm," loopnum=",$.loopnum," loopleng=",loopleng," loopphrase=",$.loopphrase)
1936c2578
< 		print("Playing chan ",ch," in loop ",$.loopnum)
---
> 		print("Playing chan ",ch," in loop ",$.loopnum," phrase=",$.loopphrase)
2616c3258
< 		print("LIMITING due to loopnotes =",lim," size before=",sizeof($.loopphrase))
---
> 		# print("LIMITING due to loopnotes =",lim)
2623c3265
< 		print("    size before=",sizeof($.loopphrase))
---
> 		# print("    size before=",sizeof($.loopphrase))
2681,2682c3323,3324
< 	if ( (Now - $.last_fade) < milliclicks(500) ) {
< 		print("MULTIPLE FADES IN < .5 secs, CLEARING!")
---
> 	if ( (Now - $.last_fade) < milliclicks(600) ) {
> 		print("MULTIPLE FADES IN < .6 secs, CLEARING!")
2933c3575
< function ergox_nthloop_resetconsole(o) {
---
> function ergox_klooper_resetconsole(o) {
2937c3579
< function ergox_nthloop_midi_restart(o) {
---
> function ergox_klooper_midi_restart(o) {
2940c3582
< function ergox_nthloop_osc_restart(o) {
---
> function ergox_klooper_osc_restart(o) {
2941a3584,3586
> }
> function ergox_klooper_json_restart(o) {
> 	o.json_restart()
